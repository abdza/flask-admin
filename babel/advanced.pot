# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2015, Serge S. Koval
# This file is distributed under the same license as the flask-admin package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: flask-admin 1.5.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-18 04:20+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/advanced.rst:4
msgid "Advanced Functionality"
msgstr ""

#: ../../doc/advanced.rst:7
msgid "Enabling CSRF Protection"
msgstr ""

#: ../../doc/advanced.rst:9
msgid "To add CSRF protection to the forms that are generated by *ModelView* instances, use the SecureForm class in your *ModelView* subclass by specifying the *form_base_class* parameter::"
msgstr ""

#: ../../doc/advanced.rst:18
msgid "SecureForm requires WTForms 2 or greater. It uses the WTForms SessionCSRF class to generate and validate the tokens for you when the forms are submitted."
msgstr ""

#: ../../doc/advanced.rst:22
msgid "Localization With Flask-Babelex"
msgstr ""

#: ../../doc/advanced.rst:26
msgid "Flask-Admin comes with translations for several languages. Enabling localization is simple:"
msgstr ""

#: ../../doc/advanced.rst:29
msgid "Install `Flask-BabelEx <http://github.com/mrjoes/flask-babelex/>`_ to do the heavy lifting. It's a fork of the `Flask-Babel <http://github.com/mitshuhiko/flask-babel/>`_ package::"
msgstr ""

#: ../../doc/advanced.rst:35
msgid "Initialize Flask-BabelEx by creating instance of `Babel` class::"
msgstr ""

#: ../../doc/advanced.rst:43
msgid "Create a locale selector function::"
msgstr ""

#: ../../doc/advanced.rst:51
msgid "Now, you could try a French version of the application at: `http://localhost:5000/admin/?lang=fr <http://localhost:5000/admin/?lang=fr>`_."
msgstr ""

#: ../../doc/advanced.rst:53
msgid "Go ahead and add your own logic to the locale selector function. The application can store locale in a user profile, cookie, session, etc. It can also use the `Accept-Language` header to make the selection automatically."
msgstr ""

#: ../../doc/advanced.rst:57
msgid "If the built-in translations are not enough, look at the `Flask-BabelEx documentation <https://pythonhosted.org/Flask-BabelEx/>`_ to see how you can add your own."
msgstr ""

#: ../../doc/advanced.rst:63
msgid "Managing Files & Folders"
msgstr ""

#: ../../doc/advanced.rst:67
msgid "To manage static files instead of database records, Flask-Admin comes with the FileAdmin plug-in. It gives you the ability to upload, delete, rename, etc. You can use it by adding a FileAdmin view to your app::"
msgstr ""

#: ../../doc/advanced.rst:83
msgid "FileAdmin also has out-of-the-box support for managing files located on a Amazon Simple Storage Service bucket. To add it to your app::"
msgstr ""

#: ../../doc/advanced.rst:93
msgid "You can disable uploads, disable file deletion, restrict file uploads to certain types, etc. Check :mod:`flask_admin.contrib.fileadmin` in the API documentation for more details."
msgstr ""

#: ../../doc/advanced.rst:97
msgid "Adding new file backends"
msgstr ""

#: ../../doc/advanced.rst:99
msgid "You can also implement your own storage backend by creating a class that implements the same methods defined in the `LocalFileStorage` class. Check :mod:`flask_admin.contrib.fileadmin` in the API documentation for details on the methods."
msgstr ""

#: ../../doc/advanced.rst:104
msgid "Adding A Redis Console"
msgstr ""

#: ../../doc/advanced.rst:108
msgid "Another plug-in that's available is the Redis Console. If you have a Redis instance running on the same machine as your app, you can::"
msgstr ""

#: ../../doc/advanced.rst:122
msgid "Replacing Individual Form Fields"
msgstr ""

#: ../../doc/advanced.rst:126
msgid "The `form_overrides` attribute allows you to replace individual fields within a form. A common use-case for this would be to add a *What-You-See-Is-What-You-Get* (WYSIWIG) editor, or to handle file / image uploads that need to be tied to a field in your model."
msgstr ""

#: ../../doc/advanced.rst:131
msgid "WYSIWIG Text Fields"
msgstr ""

#: ../../doc/advanced.rst:132
msgid "To handle complicated text content, you can use `CKEditor <http://ckeditor.com/>`_ by subclassing some of the built-in WTForms classes as follows::"
msgstr ""

#: ../../doc/advanced.rst:158
msgid "File & Image Fields"
msgstr ""

#: ../../doc/advanced.rst:160
msgid "Flask-Admin comes with a built-in :meth:`~flask_admin.form.upload.FileUploadField` and :meth:`~flask_admin.form.upload.ImageUploadField`. To make use of them, you'll need to specify an upload directory and add them to the forms in question. Image handling also requires you to have `Pillow <https://pypi.python.org/pypi/Pillow/2.8.2>`_ installed if you need to do any processing on the image files."
msgstr ""

#: ../../doc/advanced.rst:166
msgid "Have a look at the example at https://github.com/flask-admin/Flask-Admin/tree/master/examples/forms."
msgstr ""

#: ../../doc/advanced.rst:169
msgid "If you are using the MongoEngine backend, Flask-Admin supports GridFS-backed image and file uploads through WTForms fields. Documentation can be found at :mod:`flask_admin.contrib.mongoengine.fields`."
msgstr ""

#: ../../doc/advanced.rst:171
msgid "If you just want to manage static files in a directory, without tying them to a database model, then use the :ref:`File-Admin<file-admin>` plug-in."
msgstr ""

#: ../../doc/advanced.rst:175
msgid "Managing Geographical Models"
msgstr ""

#: ../../doc/advanced.rst:179
msgid "If you want to store spatial information in a GIS database, Flask-Admin has you covered. The GeoAlchemy backend extends the SQLAlchemy backend (just as `GeoAlchemy <https://geoalchemy-2.readthedocs.io/>`_  extends SQLAlchemy) to give you a pretty and functional map-based editor for your admin pages."
msgstr ""

#: ../../doc/advanced.rst:184
msgid "Some notable features include:"
msgstr ""

#: ../../doc/advanced.rst:186
msgid "Maps are displayed using the amazing `Leaflet <http://leafletjs.com/>`_ Javascript library, with map data from `Mapbox <https://www.mapbox.com/>`_."
msgstr ""

#: ../../doc/advanced.rst:188
msgid "Geographic information, including points, lines and polygons, can be edited interactively using `Leaflet.Draw <https://github.com/Leaflet/Leaflet.draw>`_."
msgstr ""

#: ../../doc/advanced.rst:190
msgid "Graceful fallback: `GeoJSON <http://geojson.org/>`_ data can be edited in a ``<textarea>``, if the user has turned off Javascript."
msgstr ""

#: ../../doc/advanced.rst:192
msgid "Works with a `Geometry <https://geoalchemy-2.readthedocs.io/en/latest/types.html#geoalchemy2.types.Geometry>`_ SQL field that is integrated with `Shapely <http://toblerity.org/shapely/>`_ objects."
msgstr ""

#: ../../doc/advanced.rst:194
msgid "To get started, define some fields on your model using GeoAlchemy's *Geometry* field. Next, add model views to your interface using the ModelView class from the GeoAlchemy backend, rather than the usual SQLAlchemy backend::"
msgstr ""

#: ../../doc/advanced.rst:209
msgid "Some of the Geometry field types that are available include: \"POINT\", \"MULTIPOINT\", \"POLYGON\", \"MULTIPOLYGON\", \"LINESTRING\" and \"MULTILINESTRING\"."
msgstr ""

#: ../../doc/advanced.rst:212
msgid "Have a look at https://github.com/flask-admin/flask-admin/tree/master/examples/geo_alchemy to get started."
msgstr ""

#: ../../doc/advanced.rst:216
msgid "Loading Tiles From Mapbox"
msgstr ""

#: ../../doc/advanced.rst:218
msgid "To have map data display correctly, you'll have to sign up for an account at https://www.mapbox.com/ and include some credentials in your application's config::"
msgstr ""

#: ../../doc/advanced.rst:226
msgid "Leaflet supports loading map tiles from any arbitrary map tile provider, but at the moment, Flask-Admin only supports Mapbox. If you want to use other providers, make a pull request!"
msgstr ""

#: ../../doc/advanced.rst:231
msgid "Limitations"
msgstr ""

#: ../../doc/advanced.rst:233
msgid "There's currently no way to sort, filter, or search on geometric fields in the admin. It's not clear that there's a good way to do so. If you have any ideas or suggestions, make a pull request!"
msgstr ""

#: ../../doc/advanced.rst:238
msgid "Customising Builtin Forms Via Rendering Rules"
msgstr ""

#: ../../doc/advanced.rst:242
msgid "Before version 1.0.7, all model backends were rendering the *create* and *edit* forms using a special Jinja2 macro, which was looping over the fields of a WTForms form object and displaying them one by one. This works well, but it is difficult to customize."
msgstr ""

#: ../../doc/advanced.rst:246
msgid "Starting from version 1.0.7, Flask-Admin supports form rendering rules, to give you fine grained control of how the forms for your modules should be displayed."
msgstr ""

#: ../../doc/advanced.rst:249
msgid "The basic idea is pretty simple: the customizable rendering rules replace a static macro, so you can tell Flask-Admin how each form should be rendered. As an extension, however, the rendering rules also let you do a bit more: You can use them to output HTML, call Jinja2 macros, render fields, and so on."
msgstr ""

#: ../../doc/advanced.rst:253
msgid "Essentially, form rendering rules separate the form rendering from the form definition. For example, it no longer matters in which sequence your form fields are defined."
msgstr ""

#: ../../doc/advanced.rst:256
msgid "To start using the form rendering rules, put a list of form field names into the `form_create_rules` property one of your admin views::"
msgstr ""

#: ../../doc/advanced.rst:262
msgid "In this example, only three fields will be rendered and `email` field will be above other two fields."
msgstr ""

#: ../../doc/advanced.rst:264
msgid "Whenever Flask-Admin sees a string value in `form_create_rules`, it automatically assumes that it is a form field reference and creates a :class:`flask_admin.form.rules.Field` class instance for that field."
msgstr ""

#: ../../doc/advanced.rst:267
msgid "Let's say we want to display some text between the `email` and `first_name` fields. This can be accomplished by using the :class:`flask_admin.form.rules.Text` class::"
msgstr ""

#: ../../doc/advanced.rst:276
msgid "Built-in Rules"
msgstr ""

#: ../../doc/advanced.rst:278
msgid "Flask-Admin comes with few built-in rules that can be found in the :mod:`flask_admin.form.rules` module:"
msgstr ""

#: ../../doc/advanced.rst:281
msgid "Form Rendering Rule"
msgstr ""

#: ../../doc/advanced.rst:281
msgid "Description"
msgstr ""

#: ../../doc/advanced.rst:283
msgid ":class:`flask_admin.form.rules.BaseRule`"
msgstr ""

#: ../../doc/advanced.rst:283
msgid "All rules derive from this class"
msgstr ""

#: ../../doc/advanced.rst:284
msgid ":class:`flask_admin.form.rules.NestedRule`"
msgstr ""

#: ../../doc/advanced.rst:284
msgid "Allows rule nesting, useful for HTML containers"
msgstr ""

#: ../../doc/advanced.rst:285
msgid ":class:`flask_admin.form.rules.Text`"
msgstr ""

#: ../../doc/advanced.rst:285
msgid "Simple text rendering rule"
msgstr ""

#: ../../doc/advanced.rst:286
msgid ":class:`flask_admin.form.rules.HTML`"
msgstr ""

#: ../../doc/advanced.rst:286
msgid "Same as `Text` rule, but does not escape the text"
msgstr ""

#: ../../doc/advanced.rst:287
msgid ":class:`flask_admin.form.rules.Macro`"
msgstr ""

#: ../../doc/advanced.rst:287
msgid "Calls macro from current Jinja2 context"
msgstr ""

#: ../../doc/advanced.rst:288
msgid ":class:`flask_admin.form.rules.Container`"
msgstr ""

#: ../../doc/advanced.rst:288
msgid "Wraps child rules into container rendered by macro"
msgstr ""

#: ../../doc/advanced.rst:289
msgid ":class:`flask_admin.form.rules.Field`"
msgstr ""

#: ../../doc/advanced.rst:289
msgid "Renders single form field"
msgstr ""

#: ../../doc/advanced.rst:290
msgid ":class:`flask_admin.form.rules.Header`"
msgstr ""

#: ../../doc/advanced.rst:290
msgid "Renders form header"
msgstr ""

#: ../../doc/advanced.rst:291
msgid ":class:`flask_admin.form.rules.FieldSet`"
msgstr ""

#: ../../doc/advanced.rst:291
msgid "Renders form header and child rules"
msgstr ""

#: ../../doc/advanced.rst:297
msgid "Using Different Database Backends"
msgstr ""

#: ../../doc/advanced.rst:301
msgid "Other than SQLAlchemy... There are five different backends for you to choose from, depending on which database you would like to use for your application. If, however, you need to implement your own database backend, have a look at :ref:`adding-model-backend`."
msgstr ""

#: ../../doc/advanced.rst:305
msgid "If you don't know where to start, but you're familiar with relational databases, then you should probably look at using `SQLAlchemy`_. It is a full-featured toolkit, with support for SQLite, PostgreSQL, MySQL, Oracle and MS-SQL amongst others. It really comes into its own once you have lots of data, and a fair amount of relations between your data models. If you want to track spatial data like latitude/longitude points, you should look into `GeoAlchemy`_, as well."
msgstr ""

#: ../../doc/advanced.rst:312
msgid "SQLAlchemy"
msgstr ""

#: ../../doc/advanced.rst:314
msgid "Notable features:"
msgstr ""

#: ../../doc/advanced.rst:316
msgid "SQLAlchemy 0.6+ support"
msgstr ""

#: ../../doc/advanced.rst:317
msgid "Paging, sorting, filters"
msgstr ""

#: ../../doc/advanced.rst:318
msgid "Proper model relationship handling"
msgstr ""

#: ../../doc/advanced.rst:319
msgid "Inline editing of related models"
msgstr ""

#: ../../doc/advanced.rst:321
msgid "**Multiple Primary Keys**"
msgstr ""

#: ../../doc/advanced.rst:323
msgid "Flask-Admin has limited support for models with multiple primary keys. It only covers specific case when all but one primary keys are foreign keys to another model. For example, model inheritance following this convention."
msgstr ""

#: ../../doc/advanced.rst:327
msgid "Let's Model a car with its tyres::"
msgstr ""

#: ../../doc/advanced.rst:344
msgid "A specific tyre is identified by using the two primary key columns of the ``Tyre`` class, of which the ``car_id`` key is itself a foreign key to the class ``Car``."
msgstr ""

#: ../../doc/advanced.rst:347
msgid "To be able to CRUD the ``Tyre`` class, you need to enumerate columns when defining the AdminView::"
msgstr ""

#: ../../doc/advanced.rst:352
msgid "The ``form_columns`` needs to be explicit, as per default only one primary key is displayed."
msgstr ""

#: ../../doc/advanced.rst:354
msgid "When having multiple primary keys, **no** validation for uniqueness *prior* to saving of the object will be done. Saving a model that violates a unique-constraint leads to an Sqlalchemy-Integrity-Error. In this case, ``Flask-Admin`` displays a proper error message and you can change the data in the form. When the application has been started with ``debug=True`` the ``werkzeug`` debugger will catch the exception and will display the stacktrace."
msgstr ""

#: ../../doc/advanced.rst:360
msgid "MongoEngine"
msgstr ""

#: ../../doc/advanced.rst:362
msgid "If you're looking for something simpler than SQLAlchemy, and your data models are reasonably self-contained, then `MongoDB <https://www.mongodb.org/>`_, a popular *NoSQL* database, could be a better option."
msgstr ""

#: ../../doc/advanced.rst:366
msgid "`MongoEngine <http://mongoengine.org/>`_ is a python wrapper for MongoDB. For an example of using MongoEngine with Flask-Admin, see https://github.com/flask-admin/flask-admin/tree/master/examples/mongoengine."
msgstr ""

#: ../../doc/advanced.rst:371
#: ../../doc/advanced.rst:392
msgid "Features:"
msgstr ""

#: ../../doc/advanced.rst:373
msgid "MongoEngine 0.7+ support"
msgstr ""

#: ../../doc/advanced.rst:374
msgid "Paging, sorting, filters, etc"
msgstr ""

#: ../../doc/advanced.rst:375
msgid "Supports complex document structure (lists, subdocuments and so on)"
msgstr ""

#: ../../doc/advanced.rst:376
msgid "GridFS support for file and image uploads"
msgstr ""

#: ../../doc/advanced.rst:378
msgid "In order to use MongoEngine integration, install the `Flask-MongoEngine <https://flask-mongoengine.readthedocs.io>`_ package. Flask-Admin uses form scaffolding from it."
msgstr ""

#: ../../doc/advanced.rst:382
#: ../../doc/advanced.rst:401
msgid "Known issues:"
msgstr ""

#: ../../doc/advanced.rst:384
msgid "Search functionality can't split query into multiple terms due to MongoEngine query language limitations"
msgstr ""

#: ../../doc/advanced.rst:387
msgid "For more, check the :class:`~flask_admin.contrib.mongoengine` API documentation."
msgstr ""

#: ../../doc/advanced.rst:390
msgid "Peewee"
msgstr ""

#: ../../doc/advanced.rst:394
msgid "Peewee 2.x+ support;"
msgstr ""

#: ../../doc/advanced.rst:395
msgid "Paging, sorting, filters, etc;"
msgstr ""

#: ../../doc/advanced.rst:396
msgid "Inline editing of related models;"
msgstr ""

#: ../../doc/advanced.rst:398
msgid "In order to use peewee integration, you need to install two additional Python packages: `peewee <http://docs.peewee-orm.com/>`_ and `wtf-peewee <https://github.com/coleifer/wtf-peewee/>`_."
msgstr ""

#: ../../doc/advanced.rst:403
msgid "Many-to-Many model relations are not supported: there's no built-in way to express M2M relation in Peewee"
msgstr ""

#: ../../doc/advanced.rst:405
msgid "For more, check the :class:`~flask_admin.contrib.peewee` API documentation. Or look at the Peewee example at https://github.com/flask-admin/flask-admin/tree/master/examples/peewee."
msgstr ""

#: ../../doc/advanced.rst:409
msgid "PyMongo"
msgstr ""

#: ../../doc/advanced.rst:411
msgid "The bare minimum you have to provide for Flask-Admin to work with PyMongo:"
msgstr ""

#: ../../doc/advanced.rst:413
msgid "A list of columns by setting `column_list` property"
msgstr ""

#: ../../doc/advanced.rst:414
msgid "Provide form to use by setting `form` property"
msgstr ""

#: ../../doc/advanced.rst:415
msgid "When instantiating :class:`flask_admin.contrib.pymongo.ModelView` class, you have to provide PyMongo collection object"
msgstr ""

#: ../../doc/advanced.rst:417
msgid "This is minimal PyMongo view::"
msgstr ""

#: ../../doc/advanced.rst:433
msgid "On top of that you can add sortable columns, filters, text search, etc."
msgstr ""

#: ../../doc/advanced.rst:435
msgid "For more, check the :class:`~flask_admin.contrib.pymongoe` API documentation. Or look at the Peewee example at https://github.com/flask-admin/flask-admin/tree/master/examples/pymongo."
msgstr ""

#: ../../doc/advanced.rst:439
msgid "Migrating From Django"
msgstr ""

#: ../../doc/advanced.rst:443
msgid "If you are used to `Django <https://www.djangoproject.com/>`_ and the *django-admin* package, you will find Flask-Admin to work slightly different from what you would expect."
msgstr ""

#: ../../doc/advanced.rst:447
msgid "Design Philosophy"
msgstr ""

#: ../../doc/advanced.rst:449
msgid "In general, Django and *django-admin* strives to make life easier by implementing sensible defaults. So a developer will be able to get an application up in no time, but it will have to conform to most of the defaults. Of course it is possible to customize things, but this often requires a good understanding of what's going on behind the scenes, and it can be rather tricky and time-consuming."
msgstr ""

#: ../../doc/advanced.rst:454
msgid "The design philosophy behind Flask is slightly different. It embraces the diversity that one tends to find in web applications by not forcing design decisions onto the developer. Rather than making it very easy to build an application that *almost* solves your whole problem, and then letting you figure out the last bit, Flask aims to make it possible for you to build the *whole* application. It might take a little more effort to get started, but once you've got the hang of it, the sky is the limit... Even when your application is a little different from most other applications out there on the web."
msgstr ""

#: ../../doc/advanced.rst:461
msgid "Flask-Admin follows this same design philosophy. So even though it provides you with several tools for getting up & running quickly, it will be up to you, as a developer, to tell Flask-Admin what should be displayed and how. Even though it is easy to get started with a simple `CRUD <http://en.wikipedia.org/wiki/Create,_read,_update_and_delete>`_ interface for each model in your application, Flask-Admin doesn't fix you to this approach, and you are free to define other ways of interacting with some, or all, of your models."
msgstr ""

#: ../../doc/advanced.rst:467
msgid "Due to Flask-Admin supporting more than one ORM (SQLAlchemy, MongoEngine, Peewee, raw pymongo), the developer is even free to mix different model types into one application by instantiating appropriate CRUD classes."
msgstr ""

#: ../../doc/advanced.rst:470
msgid "Here is a list of some of the configuration properties that are made available by Flask-Admin and the SQLAlchemy backend. You can also see which *django-admin* properties they correspond to:"
msgstr ""

#: ../../doc/advanced.rst:474
msgid "Django"
msgstr ""

#: ../../doc/advanced.rst:474
msgid "Flask-Admin"
msgstr ""

#: ../../doc/advanced.rst:476
msgid "actions"
msgstr ""

#: ../../doc/advanced.rst:476
msgid ":attr:`~flask_admin.actions`"
msgstr ""

#: ../../doc/advanced.rst:477
msgid "exclude"
msgstr ""

#: ../../doc/advanced.rst:477
msgid ":attr:`~flask_admin.model.BaseModelView.form_excluded_columns`"
msgstr ""

#: ../../doc/advanced.rst:478
msgid "fields"
msgstr ""

#: ../../doc/advanced.rst:478
msgid ":attr:`~flask_admin.model.BaseModelView.form_columns`"
msgstr ""

#: ../../doc/advanced.rst:479
msgid "form"
msgstr ""

#: ../../doc/advanced.rst:479
msgid ":attr:`~flask_admin.model.BaseModelView.form`"
msgstr ""

#: ../../doc/advanced.rst:480
msgid "formfield_overrides"
msgstr ""

#: ../../doc/advanced.rst:480
msgid ":attr:`~flask_admin.model.BaseModelView.form_args`"
msgstr ""

#: ../../doc/advanced.rst:481
msgid "inlines"
msgstr ""

#: ../../doc/advanced.rst:481
msgid ":attr:`~flask_admin.contrib.sqla.ModelView.inline_models`"
msgstr ""

#: ../../doc/advanced.rst:482
msgid "list_display"
msgstr ""

#: ../../doc/advanced.rst:482
msgid ":attr:`~flask_admin.model.BaseModelView.column_list`"
msgstr ""

#: ../../doc/advanced.rst:483
msgid "list_filter"
msgstr ""

#: ../../doc/advanced.rst:483
msgid ":attr:`~flask_admin.contrib.sqla.ModelView.column_filters`"
msgstr ""

#: ../../doc/advanced.rst:484
msgid "list_per_page"
msgstr ""

#: ../../doc/advanced.rst:484
msgid ":attr:`~flask_admin.model.BaseModelView.page_size`"
msgstr ""

#: ../../doc/advanced.rst:485
msgid "search_fields"
msgstr ""

#: ../../doc/advanced.rst:485
msgid ":attr:`~flask_admin.model.BaseModelView.column_searchable_list`"
msgstr ""

#: ../../doc/advanced.rst:486
msgid "add_form_template"
msgstr ""

#: ../../doc/advanced.rst:486
msgid ":attr:`~flask_admin.model.BaseModelView.create_template`"
msgstr ""

#: ../../doc/advanced.rst:487
msgid "change_form_template"
msgstr ""

#: ../../doc/advanced.rst:487
msgid ":attr:`~flask_admin.model.BaseModelView.change_form_template`"
msgstr ""

#: ../../doc/advanced.rst:490
msgid "You might want to check :class:`~flask_admin.model.BaseModelView` for basic model configuration options (reused by all model backends) and specific backend documentation, for example :class:`~flask_admin.contrib.sqla.ModelView`. There's much more than what is displayed in this table."
msgstr ""

#: ../../doc/advanced.rst:496
msgid "Overriding the Form Scaffolding"
msgstr ""

#: ../../doc/advanced.rst:500
msgid "If you don't want to the use the built-in Flask-Admin form scaffolding logic, you are free to roll your own by simply overriding :meth:`~flask_admin.model.base.scaffold_form`. For example, if you use `WTForms-Alchemy <https://github.com/kvesteri/wtforms-alchemy>`_, you could put your form generation code into a `scaffold_form` method in your `ModelView` class."
msgstr ""

#: ../../doc/advanced.rst:505
msgid "For SQLAlchemy, if the `synonym_property` does not return a SQLAlchemy field, then Flask-Admin won't be able to figure out what to do with it, so it won't generate a form field. In this case, you would need to manually contribute your own field::"
msgstr ""

#: ../../doc/advanced.rst:515
msgid "Customizing Batch Actions"
msgstr ""

#: ../../doc/advanced.rst:519
msgid "If you want to add other batch actions to the list view, besides the default delete action, then you can define a function that implements the desired logic and wrap it with the `@action` decorator."
msgstr ""

#: ../../doc/advanced.rst:522
msgid "The `action` decorator takes three parameters: `name`, `text` and `confirmation`. While the wrapped function should accept only one parameter - `ids`::"
msgstr ""

