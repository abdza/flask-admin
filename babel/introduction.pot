# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2015, Serge S. Koval
# This file is distributed under the same license as the flask-admin package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: flask-admin 1.5.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-18 04:20+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../doc/introduction.rst:4
msgid "Introduction To Flask-Admin"
msgstr ""

#: ../../doc/introduction.rst:7
msgid "Getting Started"
msgstr ""

#: ../../doc/introduction.rst:12
msgid "Initialization"
msgstr ""

#: ../../doc/introduction.rst:14
msgid "The first step is to initialize an empty admin interface for your Flask app::"
msgstr ""

#: ../../doc/introduction.rst:26
msgid "Here, both the *name* and *template_mode* parameters are optional. Alternatively, you could use the :meth:`~flask_admin.base.Admin.init_app` method."
msgstr ""

#: ../../doc/introduction.rst:29
msgid "If you start this application and navigate to `http://localhost:5000/admin/ <http://localhost:5000/admin/>`_, you should see an empty page with a navigation bar on top."
msgstr ""

#: ../../doc/introduction.rst:33
msgid "Adding Model Views"
msgstr ""

#: ../../doc/introduction.rst:35
msgid "Model views allow you to add a dedicated set of admin pages for managing any model in your database. Do this by creating instances of the *ModelView* class, which you can import from one of Flask-Admin's built-in ORM backends. An example is the SQLAlchemy backend, which you can use as follows::"
msgstr ""

#: ../../doc/introduction.rst:47
msgid "Straight out of the box, this gives you a set of fully featured *CRUD* views for your model:"
msgstr ""

#: ../../doc/introduction.rst:49
msgid "A `list` view, with support for searching, sorting, filtering, and deleting records."
msgstr ""

#: ../../doc/introduction.rst:50
msgid "A `create` view for adding new records."
msgstr ""

#: ../../doc/introduction.rst:51
msgid "An `edit` view for updating existing records."
msgstr ""

#: ../../doc/introduction.rst:52
msgid "An optional, read-only `details` view."
msgstr ""

#: ../../doc/introduction.rst:54
msgid "There are many options available for customizing the display and functionality of these built-in views. For more details on that, see :ref:`customizing-builtin-views`. For more details on the other ORM backends that are available, see :ref:`database-backends`."
msgstr ""

#: ../../doc/introduction.rst:59
msgid "Adding Content to the Index Page"
msgstr ""

#: ../../doc/introduction.rst:60
msgid "The first thing you'll notice when you visit `http://localhost:5000/admin/ <http://localhost:5000/admin/>`_ is that it's just an empty page with a navigation menu. To add some content to this page, save the following text as `admin/index.html` in your project's `templates` directory::"
msgstr ""

#: ../../doc/introduction.rst:69
msgid "This will override the default index template, but still give you the built-in navigation menu. So, now you can add any content to the index page, while maintaining a consistent user experience."
msgstr ""

#: ../../doc/introduction.rst:73
msgid "Authorization & Permissions"
msgstr ""

#: ../../doc/introduction.rst:77
msgid "When setting up an admin interface for your application, one of the first problems you'll want to solve is how to keep unwanted users out. With Flask-Admin there are a few different ways of approaching this."
msgstr ""

#: ../../doc/introduction.rst:82
msgid "HTTP Basic Auth"
msgstr ""

#: ../../doc/introduction.rst:83
msgid "The simplest form of authentication is HTTP Basic Auth. It doesn't interfere with your database models, and it doesn't require you to write any new view logic or template code. So it's great for when you're deploying something that's still under development, before you want the whole world to see it."
msgstr ""

#: ../../doc/introduction.rst:88
msgid "Have a look at `Flask-BasicAuth <https://flask-basicauth.readthedocs.io/>`_ to see just how easy it is to put your whole application behind HTTP Basic Auth."
msgstr ""

#: ../../doc/introduction.rst:91
msgid "Unfortunately, there is no easy way of applying HTTP Basic Auth just to your admin interface."
msgstr ""

#: ../../doc/introduction.rst:95
msgid "Rolling Your Own"
msgstr ""

#: ../../doc/introduction.rst:96
msgid "For a more flexible solution, Flask-Admin lets you define access control rules on each of your admin view classes by simply overriding the `is_accessible` method. How you implement the logic is up to you, but if you were to use a low-level library like `Flask-Login <https://flask-login.readthedocs.io/>`_, then restricting access could be as simple as::"
msgstr ""

#: ../../doc/introduction.rst:111
msgid "In the navigation menu, components that are not accessible to a particular user will not be displayed for that user. For an example of using Flask-Login with Flask-Admin, have a look at https://github.com/flask-admin/Flask-Admin/tree/master/examples/auth-flask-login."
msgstr ""

#: ../../doc/introduction.rst:115
msgid "The main drawback is that you still need to implement all of the relevant login, registration, and account management views yourself."
msgstr ""

#: ../../doc/introduction.rst:120
msgid "Using Flask-Security"
msgstr ""

#: ../../doc/introduction.rst:122
msgid "If you want a more polished solution, you could use `Flask-Security <https://pythonhosted.org/Flask-Security/>`_, which is a higher-level library. It comes with lots of built-in views for doing common things like user registration, login, email address confirmation, password resets, etc."
msgstr ""

#: ../../doc/introduction.rst:127
msgid "The only complicated bit is making the built-in Flask-Security views integrate smoothly with the Flask-Admin templates to create a consistent user experience. To do this, you will need to override the built-in Flask-Security templates and have them extend the Flask-Admin base template by adding the following to the top of each file::"
msgstr ""

#: ../../doc/introduction.rst:135
msgid "Now, you'll need to manually pass in some context variables for the Flask-Admin templates to render correctly when they're being called from the Flask-Security views. Defining a `security_context_processor` function will take care of this for you::"
msgstr ""

#: ../../doc/introduction.rst:146
msgid "For a working example of using Flask-Security with Flask-Admin, have a look at https://github.com/flask-admin/Flask-Admin/tree/master/examples/auth."
msgstr ""

#: ../../doc/introduction.rst:149
msgid "The example only uses the built-in `register` and `login` views, but you could follow the same approach for including the other views, like `forgot_password`, `send_confirmation`, etc."
msgstr ""

#: ../../doc/introduction.rst:155
msgid "Customizing Built-in Views"
msgstr ""

#: ../../doc/introduction.rst:159
msgid "The built-in `ModelView` class is great for getting started quickly. But, you'll want to configure its functionality to suit your particular models. This is done by setting values for the configuration attributes that are made available in the `ModelView` class."
msgstr ""

#: ../../doc/introduction.rst:163
msgid "To specify some global configuration parameters, you can subclass `ModelView` and use that subclass when adding your models to the interface::"
msgstr ""

#: ../../doc/introduction.rst:177
msgid "Or, in much the same way, you can specify options for a single model at a time::"
msgstr ""

#: ../../doc/introduction.rst:190
msgid "`ModelView` Configuration Attributes"
msgstr ""

#: ../../doc/introduction.rst:192
msgid "For a complete list of the attributes that are defined, have a look at the API documentation for :meth:`~flask_admin.model.BaseModelView`. Here are some of the most commonly used attributes:"
msgstr ""

#: ../../doc/introduction.rst:196
msgid "To **disable some of the CRUD operations**, set any of these boolean parameters::"
msgstr ""

#: ../../doc/introduction.rst:202
msgid "If your model has too much data to display in the list view, you can **add a read-only details view** by setting::"
msgstr ""

#: ../../doc/introduction.rst:207
msgid "**Removing columns** from the list view is easy, just pass a list of column names for the *column_excludes_list* parameter::"
msgstr ""

#: ../../doc/introduction.rst:212
msgid "To **make columns searchable**, or to use them for filtering, specify a list of column names::"
msgstr ""

#: ../../doc/introduction.rst:217
msgid "For a faster editing experience, enable **inline editing** in the list view::"
msgstr ""

#: ../../doc/introduction.rst:221
msgid "Or, have the add & edit forms display inside a **modal window** on the list page, instead of the dedicated *create* & *edit* pages::"
msgstr ""

#: ../../doc/introduction.rst:227
msgid "You can restrict the possible values for a text-field by specifying a list of **select choices**::"
msgstr ""

#: ../../doc/introduction.rst:239
msgid "To **remove fields** from the create and edit forms::"
msgstr ""

#: ../../doc/introduction.rst:243
msgid "To specify **WTForms field arguments**::"
msgstr ""

#: ../../doc/introduction.rst:252
msgid "Or, to specify arguments to the **WTForms widgets** used to render those fields::"
msgstr ""

#: ../../doc/introduction.rst:261
msgid "When your forms contain foreign keys, have those **related models loaded via ajax**, using::"
msgstr ""

#: ../../doc/introduction.rst:270
msgid "To filter the results that are loaded via ajax, you can use::"
msgstr ""

#: ../../doc/introduction.rst:277
msgid "To **manage related models inline**::"
msgstr ""

#: ../../doc/introduction.rst:281
msgid "These inline forms can be customized. Have a look at the API documentation for :meth:`~flask_admin.contrib.sqla.ModelView.inline_models`."
msgstr ""

#: ../../doc/introduction.rst:284
msgid "To **enable csv export** of the model view::"
msgstr ""

#: ../../doc/introduction.rst:288
msgid "This will add a button to the model view that exports records, truncating at :attr:`~flask_admin.model.BaseModelView.export_max_rows`."
msgstr ""

#: ../../doc/introduction.rst:291
msgid "Adding Your Own Views"
msgstr ""

#: ../../doc/introduction.rst:295
msgid "For situations where your requirements are really specific and you struggle to meet them with the built-in :class:`~flask_admin.model.ModelView` class, Flask-Admin makes it easy for you to take full control and add your own views to the interface."
msgstr ""

#: ../../doc/introduction.rst:300
msgid "Standalone Views"
msgstr ""

#: ../../doc/introduction.rst:301
msgid "A set of standalone views (not tied to any particular model) can be added by extending the :class:`~flask_admin.base.BaseView` class and defining your own view methods. For example, to add a page that displays some analytics data from a 3rd-party API::"
msgstr ""

#: ../../doc/introduction.rst:314
msgid "This will add a link to the navbar for your view. Notice that it is served at '/', the root URL. This is a restriction on standalone views: at the very minimum, each view class needs at least one method to serve a view at its root."
msgstr ""

#: ../../doc/introduction.rst:318
msgid "The `analytics_index.html` template for the example above, could look something like::"
msgstr ""

#: ../../doc/introduction.rst:325
msgid "By extending the *admin/master.html* template, you can maintain a consistent user experience, even while having tight control over your page's content."
msgstr ""

#: ../../doc/introduction.rst:329
msgid "Overriding the Built-in Views"
msgstr ""

#: ../../doc/introduction.rst:330
msgid "There may be some scenarios where you want most of the built-in ModelView functionality, but you want to replace one of the default `create`, `edit`, or `list` views. For this you could override only the view in question, and all the links to it will still function as you would expect::"
msgstr ""

#: ../../doc/introduction.rst:348
msgid "Working With the Built-in Templates"
msgstr ""

#: ../../doc/introduction.rst:352
msgid "Flask-Admin uses the `Jinja2 <http://jinja.pocoo.org/docs/>`_ templating engine."
msgstr ""

#: ../../doc/introduction.rst:357
msgid "Extending the Built-in Templates"
msgstr ""

#: ../../doc/introduction.rst:359
msgid "Rather than overriding the built-in templates completely, it's best to extend them. This will make it simpler for you to upgrade to new Flask-Admin versions in future."
msgstr ""

#: ../../doc/introduction.rst:362
msgid "Internally, the Flask-Admin templates are derived from the `admin/master.html` template. The three most interesting templates for you to extend are probably:"
msgstr ""

#: ../../doc/introduction.rst:365
msgid "`admin/model/list.html`"
msgstr ""

#: ../../doc/introduction.rst:366
msgid "`admin/model/create.html`"
msgstr ""

#: ../../doc/introduction.rst:367
msgid "`admin/model/edit.html`"
msgstr ""

#: ../../doc/introduction.rst:369
msgid "To extend the default *edit* template with your own functionality, create a template in `templates/microblog_edit.html` to look something like::"
msgstr ""

#: ../../doc/introduction.rst:379
msgid "Now, to make your view classes use this template, set the appropriate class property::"
msgstr ""

#: ../../doc/introduction.rst:386
msgid "If you want to use your own base template, then pass the name of the template to the admin constructor during initialization::"
msgstr ""

#: ../../doc/introduction.rst:392
msgid "Overriding the Built-in Templates"
msgstr ""

#: ../../doc/introduction.rst:394
msgid "To take full control over the style and layout of the admin interface, you can override all of the built-in templates. Just keep in mind that the templates will change slightly from one version of Flask-Admin to the next, so once you start overriding them, you need to take care when upgrading your package version."
msgstr ""

#: ../../doc/introduction.rst:399
msgid "To override any of the built-in templates, simply copy them from the Flask-Admin source into your project's `templates/admin/` directory. As long as the filenames stay the same, the templates in your project directory should automatically take precedence over the built-in ones."
msgstr ""

#: ../../doc/introduction.rst:405
msgid "Available Template Blocks"
msgstr ""

#: ../../doc/introduction.rst:407
msgid "Flask-Admin defines one *base* template at `admin/master.html` that all other admin templates are derived from. This template is a proxy which points to `admin/base.html`, which defines the following blocks:"
msgstr ""

#: ../../doc/introduction.rst:412
#: ../../doc/introduction.rst:432
msgid "Block Name"
msgstr ""

#: ../../doc/introduction.rst:412
#: ../../doc/introduction.rst:432
#: ../../doc/introduction.rst:453
msgid "Description"
msgstr ""

#: ../../doc/introduction.rst:414
msgid "head_meta"
msgstr ""

#: ../../doc/introduction.rst:414
msgid "Page metadata in the header"
msgstr ""

#: ../../doc/introduction.rst:415
msgid "title"
msgstr ""

#: ../../doc/introduction.rst:415
msgid "Page title"
msgstr ""

#: ../../doc/introduction.rst:416
msgid "head_css"
msgstr ""

#: ../../doc/introduction.rst:416
msgid "Various CSS includes in the header"
msgstr ""

#: ../../doc/introduction.rst:417
msgid "head"
msgstr ""

#: ../../doc/introduction.rst:417
msgid "Empty block in HTML head, in case you want to put something  there"
msgstr ""

#: ../../doc/introduction.rst:418
msgid "page_body"
msgstr ""

#: ../../doc/introduction.rst:418
msgid "Page layout"
msgstr ""

#: ../../doc/introduction.rst:419
msgid "brand"
msgstr ""

#: ../../doc/introduction.rst:419
msgid "Logo in the menu bar"
msgstr ""

#: ../../doc/introduction.rst:420
msgid "main_menu"
msgstr ""

#: ../../doc/introduction.rst:420
msgid "Main menu"
msgstr ""

#: ../../doc/introduction.rst:421
msgid "menu_links"
msgstr ""

#: ../../doc/introduction.rst:421
msgid "Links menu"
msgstr ""

#: ../../doc/introduction.rst:422
msgid "access_control"
msgstr ""

#: ../../doc/introduction.rst:422
msgid "Section to the right of the menu (can be used to add login/logout buttons)"
msgstr ""

#: ../../doc/introduction.rst:423
msgid "messages"
msgstr ""

#: ../../doc/introduction.rst:423
msgid "Alerts and various messages"
msgstr ""

#: ../../doc/introduction.rst:424
msgid "body"
msgstr ""

#: ../../doc/introduction.rst:424
msgid "Content (that's where your view will be displayed)"
msgstr ""

#: ../../doc/introduction.rst:425
msgid "tail"
msgstr ""

#: ../../doc/introduction.rst:425
msgid "Empty area below content"
msgstr ""

#: ../../doc/introduction.rst:428
msgid "In addition to all of the blocks that are inherited from `admin/master.html`, the `admin/model/list.html` template also contains the following blocks:"
msgstr ""

#: ../../doc/introduction.rst:434
msgid "model_menu_bar"
msgstr ""

#: ../../doc/introduction.rst:434
msgid "Menu bar"
msgstr ""

#: ../../doc/introduction.rst:435
msgid "model_list_table"
msgstr ""

#: ../../doc/introduction.rst:435
msgid "Table container"
msgstr ""

#: ../../doc/introduction.rst:436
msgid "list_header"
msgstr ""

#: ../../doc/introduction.rst:436
msgid "Table header row"
msgstr ""

#: ../../doc/introduction.rst:437
msgid "list_row_actions_header"
msgstr ""

#: ../../doc/introduction.rst:437
msgid "Actions header"
msgstr ""

#: ../../doc/introduction.rst:438
msgid "list_row"
msgstr ""

#: ../../doc/introduction.rst:438
msgid "Single row"
msgstr ""

#: ../../doc/introduction.rst:439
msgid "list_row_actions"
msgstr ""

#: ../../doc/introduction.rst:439
msgid "Row action cell with edit/remove/etc buttons"
msgstr ""

#: ../../doc/introduction.rst:440
msgid "empty_list_message"
msgstr ""

#: ../../doc/introduction.rst:440
msgid "Message that will be displayed if there are no models found"
msgstr ""

#: ../../doc/introduction.rst:443
msgid "Have a look at the `layout` example at https://github.com/flask-admin/flask-admin/tree/master/examples/layout to see how you can take full stylistic control over the admin interface."
msgstr ""

#: ../../doc/introduction.rst:447
msgid "Environment Variables"
msgstr ""

#: ../../doc/introduction.rst:449
msgid "While working in any of the templates that extend `admin/master.html`, you have access to a small number of environment variables:"
msgstr ""

#: ../../doc/introduction.rst:453
msgid "Variable Name"
msgstr ""

#: ../../doc/introduction.rst:455
msgid "admin_view"
msgstr ""

#: ../../doc/introduction.rst:455
msgid "Current administrative view"
msgstr ""

#: ../../doc/introduction.rst:456
msgid "admin_base_template"
msgstr ""

#: ../../doc/introduction.rst:456
msgid "Base template name"
msgstr ""

#: ../../doc/introduction.rst:457
msgid "_gettext"
msgstr ""

#: ../../doc/introduction.rst:457
msgid "Babel gettext"
msgstr ""

#: ../../doc/introduction.rst:458
msgid "_ngettext"
msgstr ""

#: ../../doc/introduction.rst:458
msgid "Babel ngettext"
msgstr ""

#: ../../doc/introduction.rst:459
msgid "h"
msgstr ""

#: ../../doc/introduction.rst:459
msgid "Helpers from :mod:`~flask_admin.helpers` module"
msgstr ""

#: ../../doc/introduction.rst:463
msgid "Generating URLs"
msgstr ""

#: ../../doc/introduction.rst:465
msgid "To generate the URL for a specific view, use *url_for* with a dot prefix::"
msgstr ""

#: ../../doc/introduction.rst:476
msgid "A specific record can also be referenced with::"
msgstr ""

#: ../../doc/introduction.rst:481
msgid "When referencing ModelView instances, use the lowercase name of the model as the prefix when calling *url_for*. Other views can be referenced by specifying a unique endpoint for each, and using that as the prefix. So, you could use::"
msgstr ""

#: ../../doc/introduction.rst:487
msgid "If your view endpoint was defined like::"
msgstr ""

